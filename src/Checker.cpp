#include "Checker.h"

std::map<std::string, Checker::SFunction >Checker::cFunc;

Checker::~Checker(void)
{
}

const char* Checker::Modules[ TOTAL_MODULES ] =
{
	"FILE PROCESSING",
	"IMAGE PROCESSING",
	"SEGMENTATION PROCESSING",
	"COMPUTE FEATURES",
	"GENERAL",
	"REGISTRATION",
	"ANALYSIS",
	"MACHINE LEARNING"
};

// GENERAL
// --------------------------------------------------------------//

const char* Checker::ParamsGN[][MAX_PARAMS]={
	{"CLEAN","-"},
};



// FILE PROCESSING
// --------------------------------------------------------------//
const char* Checker::ParamsFP[][MAX_PARAMS]={
	{"LOAD FILE","REGEXP", "OUTPUT","-"},
	{"NORMALIZE","INPUT","OUTPUT","ASHOW","WINDOWSNAME","TYPE","MAXINT","MININT","-"},
	{"WRITE FILE","INPUT","FILEEXT","P_COMPRESSIONLEVEL","FOUTPUT","APPEND_ORIGINAL_NAME","APPEND_DATE","-"},
	{"CROP IMAGE","INPUT","OUTPUT","ASHOW","WINDOW_HEIGHT","WINDOW_WIDTH","COORDINATES_X","COORDINATES_Y","WINDOWSNAME","-"},
	{"RGB COMPOSITE","RED_CHANNEL","GREEN_CHANNEL","BLUE_CHANNEL","OUTPUT","ASHOW","WINDOWSNAME","-"},
	{"BLEND","INPUT_1","INPUT_2","ALPHA_1","ALPHA_2","OUTPUT","ASHOW","WINDOWSNAME","-"},
	{"PAINT OBJECTS","INPUT","COLOUR","THICKNESS","LOAD_OBJECTS","PAINT_CONTOURS","WIDTH","HEIGHT","OUTPUT","ASHOW","WINDOWSNAME","-"},
	{"SHOW","INPUT","WINDOWSNAME","WIDTH","HEIGHT","TYPE","-"},
	{"PRINT","MESSAGE","-"},
	{"CONVERT","INPUT","OUTPUT","DEPTH","TYPE","NORMALIZE","-"}
};

// IMAGE PROCESSING
// --------------------------------------------------------------//
	
const char* Checker::ParamsIP[][MAX_PARAMS]=
{
	{"THRESHOLD","ASHOW","INPUT","THRESHOLD","MAX_THRESHOLD","THRESHOLD_TYPE","WINDOWSNAME","OUTPUT","-"},
	{"ERODE","ASHOW","INPUT","ITERATIONS","WINDOWSNAME","OUTPUT","BRUSH","-"},
	{"DILATE","ASHOW","INPUT","ITERATIONS","WINDOWSNAME","OUTPUT","BRUSH","-"},
	{"MORPHOLOGICAL OPERATION","ASHOW","INPUT","OPERATION","ITERATIONS","WINDOWSNAME","OUTPUT","BRUSH","-"},
	{"BOUNDARY EXTRACTION","ASHOW","INPUT","OUTPUT","WINDOWSNAME","THICKNESS","COLOUR","-"},
	{"FILLHULL","ASHOW","INPUT","OUTPUT","WINDOWSNAME","-"},
	{"MAKE BRUSH","ASHOW","BRUSH_SIZE_X","BRUSH_SIZE_Y","BRUSH_TYPE","WINDOWSNAME","OUTPUT","SIGMA","-"},
	{"FIND CONTOURS","INPUT","ASHOW","COLOUR","THICKNESS","RETRIEVAL_MODE","WINDOWSNAME","OUTPUT","APPROXIMATION","SAVE_OBJECTS","-"},
	{"CANNY","INPUT","ASHOW","HIGH_THRESHOLD","KERNEL_SIZE","L2_GRADIENT","LOW_THRESHOLD","WINDOWSNAME","OUTPUT","-"},
	{"SOBEL","INPUT","ASHOW","X_ORDER","Y_ORDER","SIZE","WINDOWSNAME","OUTPUT","OPERATION","-"},
	{"LAPLACIAN","INPUT","ASHOW","KERNEL_SIZE","WINDOWSNAME","OUTPUT","-"},
	{"GAUSSIAN BLUR","ASHOW","WIDTH","HEIGHT","SIGMA_X","WINDOWSNAME","INPUT","OUTPUT","SIGMA_Y","-"},
	{"BLUR","ASHOW","WIDTH","HEIGHT","WINDOWSNAME","INPUT","OUTPUT","OPERATION","-"},
	{"CREATE KERNEL","ASHOW","KERNEL_SIZE","MATRIX","WINDOWSNAME","DFACTOR","OUTPUT","-"},
	{"FILTER2D","INPUT","ASHOW","KERNEL_NAME","WINDOWSNAME","OUTPUT","-"},
	{"ADAPTIVE THRESHOLD","ASHOW","INPUT","OUTPUT","WINDOWSNAME","THRESHOLD_TYPE","METHOD","BLOCKSIZE","CONSTANT","-"},
	{"FLOODFILL","ASHOW","INPUT","LOW_DIFF","UP_DIFF","COLOUR","SEEDS","WINDOWSNAME","OUTPUT","-"},
	{"SCALAR OPERATION","ASHOW","INPUT","OUTPUT","WINDOWSNAME","OPERATION","ITERATIONS","FACTOR","-"},
	{"MATRIX OPERATION","ASHOW","INPUT1","INPUT2","OUTPUT","WINDOWSNAME","OPERATION","ITERATIONS","-"},
	{"MATRIX TO SCALAR OPERATION","INPUT","OPERATION","OUTPUT_FACTOR","-"},
	{"GBLOB","INPUT","ASHOW","SIZE","WINDOWSNAME","SEQUENCE","ALPHA","BETA","OUTPUT","-"},
}; 

const char* Checker::ParamsSP[][MAX_PARAMS] =
{
	// SEGMENTATION PROCESSING
	// --------------------------------------------------------------//
	{"WATERSHED","INPUT","ASHOW","FOREGROUND","BACKGROUND","WINDOWSNAME","OUTPUT","SAVE_OBJECTS","-"},
	{"PROPAGATE","INPUT","SEEDS","MASK","SAVE_OBJ","LAMBDA","-"},
	{"LABEL","INPUT","OUTPUT","-"},
	{"SPLIT BY WATERSHED","INPUT","REFERENCE","METHOD","EXT","TOL","SAVE_OBJ","-"},
	{"SPLIT BY OTSU","REFERENCE","LOAD_OBJECTS","SAVE_OBJECTS","-"},
	{"SPLIT BY FRAGMENTATION","REFERENCE","BIG_OBJECTS","FRAG_OBJECTS","COEFFICIENT","SAVE_OBJECTS","-"},
	{"MERGE OBJECTS","REFERENCE","LOAD_OBJECTS_1","LOAD_OBJECTS_2","OPERATION","OUTPUT","MASK","-"},
	{"HOUGH TRANSFORM","INPUT","ASHOW","LINES","RHO","DTHETA","PROBABILISTIC","WINDOWSNAME","COLOUR","THRESHOLD_INTERSECTIONS","MIN_LINE_LENGTH","MAX_LINE_GAP","-"},
	
}; 

const char* Checker::ParamsCF[ TOTAL_FUNCTIONS_CF ][MAX_PARAMS] =
{
	// COMPUTE FEATURES PROCESSING
	// --------------------------------------------------------------//
		{"BASIC","LOAD_OBJECTS","REFERENCE","MEAN","SD","MAD","QUANTILES","SAVE_INDIVIDUAL","FOUTPUT","APPEND_ORIGINAL_NAME","APPEND_DATE","-"},
		{"SHAPE","LOAD_OBJECTS","REFERENCE","AREA","PERIMETER","RADIUS","ROUNDNESS","SAVE_INDIVIDUAL","FOUTPUT","APPEND_ORIGINAL_NAME","APPEND_DATE","-"},
		{"FILTER OBJECTS","LOAD_OBJECTS","BY","MINIMUM","MAXIMUM","SAVE_OBJECTS","-"},
		{"MOMENT","LOAD_OBJECTS","REFERENCE","CENTROID","AXIS","ECCENTRICITY","THETA","SAVE_INDIVIDUAL","FOUTPUT","APPEND_ORIGINAL_NAME","APPEND_DATE","-"},
		{"HARALICK","LOAD_OBJECTS","REFERENCE","SCALES","BINS","FOUTPUT","APPEND_ORIGINAL_NAME","APPEND_DATE","-"},
		{"ALL FEATURES","LOAD_OBJECTS","REFERENCE","BASIC","SHAPE","MOMENT","HARALICK","SAVE_INDIVIDUAL","FOUTPUT","APPEND_ORIGINAL_NAME","APPEND_DATE","-"}
}; 